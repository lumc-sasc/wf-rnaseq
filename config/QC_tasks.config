//Config file for the QC subworkflow processes
process {

     //fastqc
    withName: FASTQC {
        queue = { reads.toList().size() > 1 ?
                    ((reads.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) /2500 + 60000) < 3600000 ? 'short' : 'all') :
                    ((reads.target.size() * (task.attempt * 0.1 + 0.9) /2500 + 60000) < 3600000 ? 'short' : 'all')}

        memory = {2.GB * task.attempt}

        time = {reads.toList().size() > 1 ?
                    1.ms * (reads.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) /2500 + 60000) :
                    1.ms * (reads.target.size() * (task.attempt * 0.1 + 0.9) /2500 + 60000)}
        
        cpus = 1

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
        publishDir = [path:{"${params.outdir}/quality_check/${meta.sample}/${meta.id}"},mode: 'copy']

        ext.args = { ['uk.ac.babraham.FastQC.FastQCApplication'].join(' ').trim() }


    }



    //cutadapt
    withName: CUTADAPT {
        
        queue = { reads.toList().size() > 1 ?
                    (5*(reads.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) /2500 + 60000) < 3600000 ? 'short' : 'all') :
                    (5*(reads.target.size() * task.attempt / 2500 + 60000) < 3600000 ? 'short' : 'all')}

        memory = {reads.toList().size() > 1 ?
                    5.B * (reads.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024)) :
                    5.B * (reads.target.size() * (task.attempt * 0.1 + 0.9) / 35 + (1024*1024*1024))}

        time = { reads.toList().size() > 1 ?
                    5.ms * (reads.target.sum{it.size()} * (task.attempt * 0.1 + 0.9) /2500 + 60000) :
                    5.ms * (reads.target.size() * (task.attempt * 0.1 + 0.9) /2500 + 60000)}

        cpus = 4

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.args = '--minimum-length 2 --compression-level 1 -a AGATCGGAAGAG -A AGATCGGAAGAG'

    }
}