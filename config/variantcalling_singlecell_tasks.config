process {
    
    //VARIANTCALLING SINGLESAMPLE
    //Haplotypecaller
    withName: GATK4_HAPLOTYPECALLER {
        memory = {input.toList().size() > 1 ?
                8.B * ((input.target.stream().reduce(0, (x, y) -> x + y.size()) + fasta.target.size() + dbsnp.target.size()) * task.attempt + (1024*1024*1024)):
                8.B * ((input.target.size() + fasta.target.size() + dbsnp.target.size()) * task.attempt + (1024*1024*1024))}

        time = { input.toList().size() > 1 ?
                    8.ms * ((input.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (input.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }



    //Combine gvcf
    withName: GATK4_COMBINEGVCFS {
        memory = {vcf.toList().size() > 1 ?
                8.B * ((vcf.target.stream().reduce(0, (x, y) -> x + y.size()) + fasta.target.size()) * task.attempt + (1024*1024*1024)):
                8.B * ((vcf.target.size() + fasta.target.size()) * task.attempt + (1024*1024*1024))}

        time = { vcf.toList().size() > 1 ?
                    8.ms * ((vcf.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (vcf.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3    
    }



    //Merge gvcf
    withName: PICARD_MERGEVCFS {
        memory = {vcf.toList().size() > 1 ?
                8.B * ((vcf.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt + (1024*1024*1024)):
                8.B * ((vcf.target.size()) * task.attempt + (1024*1024*1024))}

        time = { vcf.toList().size() > 1 ?
                    8.ms * ((vcf.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (vcf.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }



    //stats
    withName: BCFTOOLS_STATS {
        memory = {vcf.toList().size() > 1 ?
                8.B * ((vcf.target.stream().reduce(0, (x, y) -> x + y.size()) + fasta.target.size()) * task.attempt + (1024*1024*1024)):
                8.B * ((vcf.target.size() + fasta.target.size()) * task.attempt + (1024*1024*1024))}

        time = { vcf.toList().size() > 1 ?
                    8.ms * ((vcf.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (vcf.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }
}