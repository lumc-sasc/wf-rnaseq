//Config file for the bammetrics subworkflow processes.
process {
    
        //samtools flagstat
    withName: SAMTOOLS_FLAGSTAT {
        memory = {bam.toList().size() > 1 ?
                8.B * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt + (1024*1024*1024)) :
                8.B * ((bam.target.size()) * task.attempt + (1024*1024*1024)) }

        time = { bam.toList().size() > 1 ?
                    8.ms * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    8.ms * (bam.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3


    }

    

    //picard collect multiple metrics
    withName: PICARD_COLLECTMULTIPLEMETRICS {
        memory = {bam.toList().size() > 1 ?
                1.B * ((bam.target.stream().reduce(0, (x, y) -> x + y.size()) + fasta.target.size()) * task.attempt + (1024*1024*1024)) :
                1.B * ((bam.target.size() + fasta.target.size()) * task.attempt + (1024*1024*1024))}

        time = { bam.toList().size() > 1 ?
                    1.ms * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    1.ms * (bam.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        publishDir = [path:{"${params.outdir}/flagstat/${meta.id}"}, mode: 'copy']
    }



    //picard collect rna metrics
    withName: PICARD_COLLECTRNASEQMETRICS {
        memory = {bam.toList().size() > 1 ?
                1.B * ((bam.target.stream().reduce(0, (x, y) -> x + y.size()) + fasta.target.size()) * task.attempt + (1024*1024*1024)):
                1.B * ((bam.target.size() + fasta.target.size()) * task.attempt + (1024*1024*1024))}

        time = { bam.toList().size() > 1 ?
                    1.ms * ((bam.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    1.ms * (bam.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.args = { ( meta.strandedness == "forward" || meta.single_end ) ?
            "--STRAND_SPECIFICITY FIRST_READ_TRANSCRIPTION_STRAND" :
        meta.strandedness == "reverse" ?
        "--STRAND_SPECIFICITY SECOND_READ_TRANSCRIPTION_STRAND" :
        "--STRAND_SPECIFICITY NONE" }

        ext.prefix = { "${meta.id}_CollectRnaSeqMetrics" }
    }
}