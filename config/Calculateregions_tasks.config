process {
    //CALCULATE REGIONS
    //bedtools merge
    withName: BEDTOOLS_MERGE {
        queue = { bed.toList().size() > 1 ?
                    (5*((bed.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
                    (5*(bed.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {bed.toList().size() > 1 ?
                8.B * ((bed.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt + (1024*1024*1024)):
                8.B * ((bed.target.size()) * task.attempt + (1024*1024*1024)) }

        time = { bed.toList().size() > 1 ?
                    5.ms * ((bed.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (bed.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3


        ext.prefix = { "${meta.id}_out" }
    }

    

     //Bedtools Complement
    withName: BEDTOOLS_COMPLEMENT {
        queue = { bed.toList().size() > 1 ?
                    (5*((bed.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
                    (5*(bed.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {bed.toList().size() > 1 ?
                8.B * ((bed.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt + (1024*1024*1024)):
                8.B * ((bed.target.size()) * task.attempt + (1024*1024*1024))}

        time = { bed.toList().size() > 1 ?
                    5.ms * ((bed.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (bed.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

    }



     //Bedtools Intersect
    withName: BEDTOOLS_INTERSECT {
        queue = { intervals1.toList().size() > 1 ?
                    (5*((intervals1.target.stream().reduce(0, (x, y) -> x + y.size()) + intervals2.target.size()) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
                    (5*((intervals1.target.size() + intervals2.target.size()) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {intervals1.toList().size() > 1 ?
                8.B * ((intervals1.target.stream().reduce(0, (x, y) -> x + y.size()) + intervals2.target.size()) * task.attempt + (1024*1024*1024)):
                8.B * ((intervals1.target.size() + intervals2.target.size()) * task.attempt + (1024*1024*1024))}

        time = { intervals1.toList().size() > 1 ?
                    5.ms * ((intervals1.target.stream().reduce(0, (x, y) -> x + y.size()) + intervals2.target.size()) * task.attempt / 1000 + 125000) :
                    5.ms * ((intervals1.target.size() + intervals2.target.size()) * task.attempt / 1000 + 125000)}

        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3

        ext.prefix = { "${meta.id}_out" }

    }



    //scatter regions
    withName: SCATTERREGIONS {
        queue = { input_file.toList().size() > 1 ?
                    (5*((input_file.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all') :
                    (5*(input_file.target.size() * task.attempt / 1000 + 125000) < 3600000 ? 'short' : 'all')}

        memory = {input_file.toList().size() > 1 ?
                8.B * ((input_file.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt + (1024*1024*1024)):
                8.B * ((input_file.target.size()) * task.attempt + (1024*1024*1024))}

        time = { input_file.toList().size() > 1 ?
                    5.ms * ((input_file.target.stream().reduce(0, (x, y) -> x + y.size())) * task.attempt / 1000 + 125000) :
                    5.ms * (input_file.target.size() * task.attempt / 1000 + 125000)}
        cpus = 2

        errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }
        maxRetries = 3
    }
}